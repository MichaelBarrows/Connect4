{"version":3,"sources":["vendor/ember-cli/app-prefix.js","cw2/app.js","cw2/components/connect-4.js","cw2/components/welcome-page.js","cw2/helpers/app-version.js","cw2/helpers/pluralize.js","cw2/helpers/singularize.js","cw2/initializers/app-version.js","cw2/initializers/container-debug-adapter.js","cw2/initializers/data-adapter.js","cw2/initializers/ember-data.js","cw2/initializers/export-application-global.js","cw2/initializers/injectStore.js","cw2/initializers/store.js","cw2/initializers/transforms.js","cw2/instance-initializers/ember-data.js","cw2/resolver.js","cw2/router.js","cw2/routes/game.js","cw2/services/ajax.js","cw2/templates/application.js","cw2/templates/components/connect-4.js","cw2/templates/game.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-config.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["\"use strict\";\n\n\n","define('cw2/app', ['exports', 'cw2/resolver', 'ember-load-initializers', 'cw2/config/environment'], function (exports, _resolver, _emberLoadInitializers, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var App = Ember.Application.extend({\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix,\n    Resolver: _resolver.default\n  });\n\n  (0, _emberLoadInitializers.default)(App, _environment.default.modulePrefix);\n\n  exports.default = App;\n});","define('cw2/components/connect-4', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  // the four patterns that need to be matched to win the game\n  var winning_patterns = [\n  // down\n  [['p', 0, 1], ['p', 0, 1], ['p', 0, 1], ['p']],\n  // across\n  [['p', 1, 0], ['p', 1, 0], ['p', 1, 0], ['p']],\n  // diagonally (from left hand side)\n  [['p', 1, 1], ['p', 1, 1], ['p', 1, 1], ['p']],\n  // diagonally (from right hand side)\n  [['p', 1, -1], ['p', 1, -1], ['p', 1, -1], ['p']]];\n\n  // the patterns and scores the computer player uses to determine its next move\n  var patterns = [\n  // four markers next to each other (winning patterns)\n  {\n    pattern: [['p', 0, 1], ['p', 0, 1], ['p', 0, 1], ['p']],\n    score: 1000\n  }, {\n    pattern: [['p', 1, 0], ['p', 1, 0], ['p', 1, 0], ['p']],\n    score: 1000\n  }, {\n    pattern: [['p', 1, 1], ['p', 1, 1], ['p', 1, 1], ['p']],\n    score: 1000\n  }, {\n    pattern: [['p', 1, -1], ['p', 1, -1], ['p', 1, -1], ['p']],\n    score: 1000\n  },\n  // three markers next to each other\n  {\n    pattern: [['p', 0, 1], [['p', 0, 1]], ['p']],\n    score: 500\n  }, {\n    pattern: [['p', 1, 0], [['p', 1, 0]], ['p']],\n    score: 500\n  }, {\n    pattern: [['p', 1, 1], [['p', 1, 1]], ['p']],\n    score: 500\n  }, {\n    pattern: [['p', 1, -1], [['p', 1, -1]], ['p']],\n    score: 500\n  },\n  // two markers next to each other\n  {\n    pattern: [['p', 0, 1], ['p']],\n    score: 100\n  }, {\n    pattern: [['p', 1, 0], ['p']],\n    score: 100\n  }, {\n    pattern: [['p', 1, 1], ['p']],\n    score: 100\n  }, {\n    pattern: [['p', 1, -1], ['p']],\n    score: 100\n  }];\n\n  /**\n  * This function checks to see if a player has won the game by comparing the\n  * state of the playing board against the winning patterns.\n  * it loops over all of the patterns and sends the game state, pattern to be\n  * checked and the player to the match_pattern() function which determines if\n  * they match, if they match, the winner is returned, if there is no winner and\n  * no more moves can be made, a blank string is returned to indicate a draw\n  */\n  function check_game_winner(state) {\n    var winner;\n    var patterns = winning_patterns;\n    // loop over each of the winning patterns\n    for (var pidx = 0; pidx < patterns.length; pidx++) {\n      var pattern = patterns[pidx];\n      // check if the red player has won thegame by completing the pattern\n      if (match_pattern(state, pattern, 'red')) {\n        // set the winner to red\n        winner = 'red';\n        // check if the yellow player has won the game by completing the pattern\n      } else if (match_pattern(state, pattern, 'yellow')) {\n        // set the winner to yellow\n        winner = 'yellow';\n      }\n      // checks if a winner has been identified and sends returns the player\n      if (winner) {\n        return winner;\n      }\n    }\n\n    /**\n    * if a player hasn't won the game and there are no more positions that can\n    * be played the game must have ended in a draw\n    */\n    var draw = true;\n    for (var x = 0; x <= 7; x++) {\n      for (var y = 0; y <= 6; y++) {\n        if (!state[x][y]) {\n          return undefined;\n        }\n      }\n    }\n    return '';\n  }\n\n  /**\n  * The computer_move function is called when it is the computers turn to play\n  * a move, the function takes the state as a parameter and uses the alphabeta()\n  * (minimax) function to determine the best move to make.\n  */\n  function computer_move(state) {\n    // sends the state to the alphabeta() function to look 4 moves ahead and\n    // determine the best move to make\n    var moves = alphabeta(state, 4, 'red', Number.MIN_VALUE, Number.MAX_VALUE);\n    var max_score = undefined;\n    var move = undefined;\n    // loops over all of the moves, identifying the move with the highest score,\n    // which would be the best to play\n    for (var idx = 0; idx < moves.length; idx++) {\n      if (max_score === undefined || moves[idx].score > max_score) {\n        max_score = moves[idx].score;\n        move = {\n          x: moves[idx].x,\n          y: moves[idx].y\n        };\n      }\n    }\n    return move;\n  }\n  /**\n  * clones the state of the game for the minimax algorithm to determine how\n  * playing various positions will play out, returning the resulting state\n  * from playing the move\n  */\n  function deepClone(state) {\n    var new_state = [];\n    for (var sidx = 0; sidx < state.length; sidx++) {\n      new_state.push(state[sidx].slice(0));\n    }\n    return new_state;\n  }\n\n  /**\n  * match_pattern() function is used to determine if a play has matched a pattern,\n  * by looping over every position played and sending the pattern, state, player\n  * and x & y positions to the match_pattern_at() function, which determines\n  * whether a match has occured\n  */\n  function match_pattern(state, pattern, player) {\n    for (var mpidx1 = 0; mpidx1 < state.length; mpidx1++) {\n      for (var mpidx2 = 0; mpidx2 < state[mpidx1].length; mpidx2++) {\n        var matches = match_pattern_at(state, pattern, player, mpidx1, mpidx2);\n        if (matches) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n  * the heuristic() function calculates a 'score' of playing a move, to determine\n  * the best move to play for the computer and the worst move the user could play\n  */\n  function heuristic(state) {\n    var score = 0;\n    // loops over the patterns to calculate a score for the particular play for\n    // the computer\n    for (var hidx = 0; hidx < patterns.length; hidx++) {\n      if (match_pattern(state, patterns[hidx].pattern, 'red')) {\n        score = score + patterns[hidx].score;\n      }\n      // checks if the play would allow the user to win\n      if (match_pattern(state, patterns[hidx].pattern, 'yellow')) {\n        score = score - patterns[hidx].score;\n      }\n    }\n    return score;\n  }\n\n  /**\n  * the alphabeta() function implements and optimises the minimax algorithm for\n  * finding positions, the alphabeta aspect stops the minimax algorithm for\n  * searching for plays that would not be of benefit to the computer player.\n  * this function also clones the state to simulate how playing various positions\n  * would play out for the computer player\n  */\n  function alphabeta(state, limit, player, alpha, beta) {\n    var moves = [];\n    if (limit > 0) {\n      var cutoff;\n      if (player === 'red') {\n        cutoff = Number.MIN_VALUE;\n      } else {\n        cutoff = Number.MAX_VALUE;\n      }\n      for (var mmidx1 = 0; mmidx1 < 7; mmidx1++) {\n        for (var mmidx2 = 0; mmidx2 < 6; mmidx2++) {\n          if (state[mmidx1][mmidx2] == undefined) {\n            var move = {\n              x: mmidx1,\n              y: mmidx2,\n              state: deepClone(state),\n              score: 0\n            };\n            move.state[mmidx1][mmidx2] = player;\n            // restricts the minimax algorithm if the algorithm is only looking\n            // one move ahead\n            if (limit === 1 || check_game_winner(move.state) !== undefined) {\n              move.score = heuristic(move.state);\n            } else {\n              move.moves = alphabeta(move.state, limit - 1, player == 'yellow' ? 'red' : 'yellow', alpha, beta);\n              var score = undefined;\n              for (var mmidx3 = 0; mmidx3 < move.moves.length; mmidx3++) {\n                if (score === undefined) {\n                  score = move.moves[mmidx3].score;\n                } else if (player === 'yellow') {\n                  score = Math.max(score, move.moves[mmidx3].score);\n                } else if (player === 'red') {\n                  score = Math.min(score, move.moves[mmidx3].score);\n                }\n              }\n              move.score = score;\n            }\n            // adds the move to the moves list\n            moves.push(move);\n            // calculates the alpha and beta values to restrict the searching\n            if (player === 'red') {\n              cutoff = Math.max(cutoff, move.score);\n              alpha = Math.max(cutoff, alpha);\n            } else {\n              cutoff = Math.min(cutoff, move.score);\n              beta = Math.min(cutoff, beta);\n            }\n            // there are no better or worse moves at this point\n            if (beta <= alpha) {\n              return moves;\n            }\n          }\n        }\n      }\n    }\n    return moves;\n  }\n\n  /**\n  * match_pattern_at() function recursively checks if a single pattern is\n  * matched in the games state to determine a good position to play for the\n  * computer and the winner of the game\n  */\n  function match_pattern_at(state, pattern, player, x, y) {\n    if (x >= 0 && x < state.length) {\n      if (y >= 0 && y < state[x].length) {\n        var element = pattern[0];\n        if (element[0] == 'p') {\n          if (state[x][y] !== player) {\n            return false;\n          }\n        } else if (element[0] == '') {\n          if (state[x][y] !== undefined) {\n            return false;\n          }\n        }\n        // recursively calls itself again if there are more patterns to be checked\n        if (pattern.length > 1) {\n          return match_pattern_at(state, pattern.slice(1), player, x + element[1], y + element[2]);\n        } else {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  exports.default = Ember.Component.extend({\n    // variables to hold the applications state\n    playing: false,\n    winner: undefined,\n    draw: false,\n    yellow: undefined,\n    red: undefined,\n    init: function init() {\n      // allows the didInsertElement function to run\n      this._super.apply(this, arguments);\n      // registers the sounds for use later\n      createjs.Sound.registerSound(\"assets/sounds/click.wav\", \"place-marker\");\n      createjs.Sound.registerSound(\"assets/sounds/falling.mp3\", \"falling\");\n      createjs.Sound.registerSound(\"assets/sounds/tada.wav\", \"tada\");\n    },\n    // Called after ember inserts the canvas into the browsers DOM\n    didInsertElement: function didInsertElement() {\n      // Select the canvas element\n      var stage = new createjs.Stage(this.$('#stage')[0]);\n      // Draw the board game\n      var board = new createjs.Shape();\n      var graphics = board.graphics;\n      // Set the colour for the playing board\n      graphics.beginFill('#36938F');\n      // horizontal lines\n      graphics.drawRect(0, 0, 294, 2);\n      graphics.drawRect(0, 42, 294, 2);\n      graphics.drawRect(0, 84, 294, 2);\n      graphics.drawRect(0, 126, 294, 2);\n      graphics.drawRect(0, 168, 294, 2);\n      graphics.drawRect(0, 210, 294, 2);\n      graphics.drawRect(0, 252, 296, 2);\n      // vertical lines\n      graphics.drawRect(0, 0, 2, 252);\n      graphics.drawRect(42, 0, 2, 252);\n      graphics.drawRect(84, 0, 2, 252);\n      graphics.drawRect(126, 0, 2, 252);\n      graphics.drawRect(168, 0, 2, 252);\n      graphics.drawRect(210, 0, 2, 252);\n      graphics.drawRect(252, 0, 2, 252);\n      graphics.drawRect(294, 0, 2, 252);\n      // Measurements to indent the playing board by\n      board.x = 42;\n      board.y = 40;\n      // hide the board ready for animation\n      board.alpha = 0;\n      this.set('board', board);\n      // add the board to the canvas\n      stage.addChild(board);\n      // object to store the playing markers\n      var markers = {\n        'red': [],\n        'yellow': []\n        // for loop to create 21 markers of each colour\n      };for (var x = 0; x < 21; x++) {\n        // Create the red markers\n        var redMarker = new createjs.Shape();\n        graphics = redMarker.graphics;\n        graphics.beginFill('#FF0000');\n        graphics.drawCircle(0, 0, 15);\n        // Hide the red marker\n        redMarker.visible = false;\n        // add the red marker to the canvas\n        stage.addChild(redMarker);\n        // add the red marker to the object storing the markers\n        markers.red.push(redMarker);\n\n        // Create the yellow markers\n        var yellowMarker = new createjs.Shape();\n        graphics = yellowMarker.graphics;\n        graphics.beginFill('#FFFF00');\n        graphics.drawCircle(0, 0, 15);\n        // Hide the yellow markers\n        yellowMarker.visible = false;\n        // Add the yellow marker to the canvas\n        stage.addChild(yellowMarker);\n        // Add the yellow marker to the object storing the markers\n        markers.yellow.push(yellowMarker);\n      }\n      // sets the variables to hold the game state\n      this.set('markers', markers);\n      this.set('stage', stage);\n      // event listener for animation changes\n      createjs.Ticker.addEventListener(\"tick\", stage);\n    },\n    // Handles the users clicks to place the users marker and then allows the\n    // computer to play their move\n    click: function click(ev) {\n      var component = this;\n      // checks the user is playing the game and there is no winner yet\n      if (component.get('playing') && !component.get('winner')) {\n        // checks that the click was within the playing board\n        if (ev.target.tagName.toLowerCase() == 'canvas' && ev.offsetX >= 40 && ev.offsetY >= 40 && ev.offsetX < 336 && ev.offsetY < 294) {\n          // calculates which column of the board the click occured in\n          var x = Math.floor((ev.offsetX - 40) / 42);\n          // sets the row to the bottommost row\n          var y = 5;\n          // gets the state of the game\n          var state = component.get('state');\n          // checks if the bottommost square of the column is filled, and works up until an empty square is identified\n          while (state[x][y] == 'red' || state[x][y] == 'yellow') {\n            // ensures the marker cannot be placed above the board\n            if (y > 0) {\n              // moves up a row\n              y -= 1;\n            } else {\n              // an empty position has been identified\n              break;\n            }\n          }\n          // checks the position is empty\n          if (!state[x][y]) {\n            createjs.Sound.play(\"place-marker\");\n            // var player = component.get('player');\n            state[x][y] = 'yellow';\n            // gets the number of moves for the yellow player\n            var move_count = component.get('moves')['yellow'];\n            var marker = component.get('markers')['yellow'][move_count];\n\n            marker.visible = true;\n            // determines the column the marker is being placed in\n            marker.x = 64 + x * 42;\n            // animates the marker to make it appear to dropdown\n            createjs.Tween.get(marker).to({ y: 62 + y * 42 }, 400);\n          }\n          // red players turn\n          component.set('red', true);\n          component.set('yellow', undefined);\n          // calls the check_winner() function to see if someone has won the game\n          component.check_winner();\n          // increments the move counter for the yellow player\n          component.get('moves')['yellow'] = move_count + 1;\n          // delays the computers move by 500ms to make it appear to think about\n          // the next move\n          setTimeout(function () {\n            // checks that the game is still playable\n            if (!component.get('winner') && !component.get('draw')) {\n              var move = computer_move(state);\n              // sets the row to the bottommost row\n              move.y = 5;\n              // checks if the bottommost square of the column is filled, and works up until an empty square is identified\n              while (state[move.x][move.y] == 'red' || state[move.x][move.y] == 'yellow') {\n                // checks the top of the column hasn't been reached\n                if (move.y > 0) {\n                  // moves up a row for the next iteration of the while loop\n                  move.y -= 1;\n                } else {\n                  // an empty position has been found\n                  break;\n                }\n              }\n              // gets the number of moves the computer has made\n              move_count = component.get('moves')['red'];\n              // sets the state of the position played to the computers colour\n              state[move.x][move.y] = 'red';\n              marker = component.get('markers')['red'][move_count];\n              // animates the marker to make it appear\n              createjs.Tween.get(marker).wait(500).to({ alpha: 1 }, 1000);\n              marker.visible = true;\n              // sets the column for the marker to go into\n              marker.x = 64 + move.x * 42;\n              // animates the marker to dropdown\n              createjs.Tween.get(marker).to({ y: 62 + move.y * 42 }, 400);\n              // increments the move count\n              component.get('moves')['red'] = move_count + 1;\n              // yellow players turn\n              component.set('red', undefined);\n              component.set('yellow', true);\n              // checks if the position played resulted in the computer winning\n              // the game\n              component.check_winner();\n            }\n          }, 500);\n        }\n      }\n    },\n    // calls the check_game_winner() function which then checks the players moves\n    // to see if they've won the game\n    check_winner: function check_winner() {\n      var state = this.get('state');\n      var winner = check_game_winner(state);\n      // checks if the winner variable has been set\n      if (winner !== undefined) {\n        // evaluates whether the winner variable is identifing a draw\n        if (winner === '') {\n          // disables the player turn messages\n          this.set('yellow', undefined);\n          this.set('red', undefined);\n          this.set('draw', true);\n        } else {\n          // the player has won the game\n          // disables the player turn messages\n          this.set('yellow', undefined);\n          this.set('red', undefined);\n          // plays a sound to signify a player has won\n          createjs.Sound.play(\"tada\");\n          // the winner is sent to the UI\n          this.set('winner', winner);\n        }\n      }\n    },\n    actions: {\n      /**\n      * shows the board when the start button is pressed and animates the\n      * invisible markers to the top of the board ready for the user to play.\n      * also defines the variables to control the game, and the state of gameplay\n      */\n      start: function start() {\n        var board = this.get('board');\n        board.alpha = 0;\n        if (this.get('playing')) {\n          var markers = this.get('markers');\n          // loops over the markers moving them back to the top of the board,\n          // without showing them\n          for (var idx = 0; idx < 21; idx++) {\n            createjs.Tween.get(markers.red[idx]).to({ y: 0 }, 0);\n            createjs.Tween.get(markers.yellow[idx]).to({ y: 0 }, 0);\n          }\n          createjs.Sound.play(\"falling\");\n          createjs.Tween.get(board).wait(500).to({ alpha: 1 }, 1000);\n        } else {\n          createjs.Tween.get(board).to({ alpha: 1 }, 1000);\n        }\n        this.set('playing', true);\n        this.set('winner', undefined);\n        this.set('draw', undefined);\n        // sets the game board to be empty\n        this.set('state', [[undefined, undefined, undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined, undefined, undefined], [undefined, undefined, undefined, undefined, undefined, undefined]]);\n        // sets the move counts to zero\n        this.set('moves', { 'red': 0, 'yellow': 0 });\n        // lets the user play first\n        this.set('player', 'yellow');\n        // enables the yellow player message in the UI\n        this.set('yellow', true);\n        markers = this.get('markers');\n        // makes the markers invisible, so they cannot be seen before playing the\n        // game\n        for (var midx = 0; midx < 21; midx++) {\n          markers.yellow[midx].visible = false;\n          markers.red[midx].visible = false;\n        }\n        // updates the stage when graphics are changed\n        this.get('stage').update();\n      }\n    }\n  });\n});","define('cw2/components/welcome-page', ['exports', 'ember-welcome-page/components/welcome-page'], function (exports, _welcomePage) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, 'default', {\n    enumerable: true,\n    get: function () {\n      return _welcomePage.default;\n    }\n  });\n});","define('cw2/helpers/app-version', ['exports', 'cw2/config/environment', 'ember-cli-app-version/utils/regexp'], function (exports, _environment, _regexp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.appVersion = appVersion;\n  var version = _environment.default.APP.version;\n  function appVersion(_) {\n    var hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (hash.hideSha) {\n      return version.match(_regexp.versionRegExp)[0];\n    }\n\n    if (hash.hideVersion) {\n      return version.match(_regexp.shaRegExp)[0];\n    }\n\n    return version;\n  }\n\n  exports.default = Ember.Helper.helper(appVersion);\n});","define('cw2/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _pluralize) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = _pluralize.default;\n});","define('cw2/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _singularize) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = _singularize.default;\n});","define('cw2/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'cw2/config/environment'], function (exports, _initializerFactory, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var name = void 0,\n      version = void 0;\n  if (_environment.default.APP) {\n    name = _environment.default.APP.name;\n    version = _environment.default.APP.version;\n  }\n\n  exports.default = {\n    name: 'App Version',\n    initialize: (0, _initializerFactory.default)(name, version)\n  };\n});","define('cw2/initializers/container-debug-adapter', ['exports', 'ember-resolver/resolvers/classic/container-debug-adapter'], function (exports, _containerDebugAdapter) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = {\n    name: 'container-debug-adapter',\n\n    initialize: function initialize() {\n      var app = arguments[1] || arguments[0];\n\n      app.register('container-debug-adapter:main', _containerDebugAdapter.default);\n      app.inject('container-debug-adapter:main', 'namespace', 'application:main');\n    }\n  };\n});","define('cw2/initializers/data-adapter', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = {\n    name: 'data-adapter',\n    before: 'store',\n    initialize: function initialize() {}\n  };\n});","define('cw2/initializers/ember-data', ['exports', 'ember-data/setup-container', 'ember-data'], function (exports, _setupContainer) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = {\n    name: 'ember-data',\n    initialize: _setupContainer.default\n  };\n});","define('cw2/initializers/export-application-global', ['exports', 'cw2/config/environment'], function (exports, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.initialize = initialize;\n  function initialize() {\n    var application = arguments[1] || arguments[0];\n    if (_environment.default.exportApplicationGlobal !== false) {\n      var theGlobal;\n      if (typeof window !== 'undefined') {\n        theGlobal = window;\n      } else if (typeof global !== 'undefined') {\n        theGlobal = global;\n      } else if (typeof self !== 'undefined') {\n        theGlobal = self;\n      } else {\n        // no reasonable global, just bail\n        return;\n      }\n\n      var value = _environment.default.exportApplicationGlobal;\n      var globalName;\n\n      if (typeof value === 'string') {\n        globalName = value;\n      } else {\n        globalName = Ember.String.classify(_environment.default.modulePrefix);\n      }\n\n      if (!theGlobal[globalName]) {\n        theGlobal[globalName] = application;\n\n        application.reopen({\n          willDestroy: function willDestroy() {\n            this._super.apply(this, arguments);\n            delete theGlobal[globalName];\n          }\n        });\n      }\n    }\n  }\n\n  exports.default = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n});","define('cw2/initializers/injectStore', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = {\n    name: 'injectStore',\n    before: 'store',\n    initialize: function initialize() {}\n  };\n});","define('cw2/initializers/store', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = {\n    name: 'store',\n    after: 'ember-data',\n    initialize: function initialize() {}\n  };\n});","define('cw2/initializers/transforms', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = {\n    name: 'transforms',\n    before: 'store',\n    initialize: function initialize() {}\n  };\n});","define(\"cw2/instance-initializers/ember-data\", [\"exports\", \"ember-data/initialize-store-service\"], function (exports, _initializeStoreService) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = {\n    name: \"ember-data\",\n    initialize: _initializeStoreService.default\n  };\n});","define('cw2/resolver', ['exports', 'ember-resolver'], function (exports, _emberResolver) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = _emberResolver.default;\n});","define('cw2/router', ['exports', 'cw2/config/environment'], function (exports, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var Router = Ember.Router.extend({\n    location: _environment.default.locationType,\n    rootURL: _environment.default.rootURL\n  });\n\n  Router.map(function () {\n    this.route('game', { path: '/' });\n  });\n\n  exports.default = Router;\n});","define('cw2/routes/game', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.Route.extend({});\n});","define('cw2/services/ajax', ['exports', 'ember-ajax/services/ajax'], function (exports, _ajax) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, 'default', {\n    enumerable: true,\n    get: function () {\n      return _ajax.default;\n    }\n  });\n});","define(\"cw2/templates/application\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.HTMLBars.template({ \"id\": \"/Ut0YkyM\", \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[6,\\\"section\\\"],[9,\\\"id\\\",\\\"app\\\"],[7],[0,\\\"\\\\n\\\"],[0,\\\"  \\\"],[6,\\\"header\\\"],[7],[0,\\\"\\\\n\\\"],[0,\\\"    \\\"],[6,\\\"h1\\\"],[7],[4,\\\"link-to\\\",[\\\"game\\\"],null,{\\\"statements\\\":[[0,\\\"Connect 4\\\"]],\\\"parameters\\\":[]},null],[8],[0,\\\"\\\\n  \\\"],[8],[0,\\\"\\\\n  \\\"],[6,\\\"article\\\"],[7],[0,\\\"\\\\n\\\"],[0,\\\"    \\\"],[1,[18,\\\"outlet\\\"],false],[0,\\\"\\\\n  \\\"],[8],[0,\\\"\\\\n\\\"],[0,\\\"  \\\"],[6,\\\"footer\\\"],[7],[0,\\\"\\\\n    \\\"],[6,\\\"div\\\"],[9,\\\"class\\\",\\\"float-left\\\"],[7],[0,\\\"\\\\n      \\\"],[6,\\\"p\\\"],[7],[0,\\\"Powered by Ember.\\\"],[8],[0,\\\"\\\\n    \\\"],[8],[0,\\\"\\\\n    \\\"],[6,\\\"div\\\"],[9,\\\"class\\\",\\\"float-right\\\"],[7],[0,\\\"\\\\n      \\\"],[6,\\\"p\\\"],[7],[0,\\\"Built by Michael Barrows\\\"],[8],[0,\\\"\\\\n    \\\"],[8],[0,\\\"\\\\n  \\\"],[8],[0,\\\"\\\\n\\\"],[8],[0,\\\"\\\\n\\\"]],\\\"hasEval\\\":false}\", \"meta\": { \"moduleName\": \"cw2/templates/application.hbs\" } });\n});","define(\"cw2/templates/components/connect-4\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.HTMLBars.template({ \"id\": \"oODRi7gz\", \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[4,\\\"if\\\",[[20,[\\\"playing\\\"]]],null,{\\\"statements\\\":[[6,\\\"div\\\"],[9,\\\"class\\\",\\\"button-container\\\"],[7],[0,\\\"\\\\n  \\\"],[6,\\\"button\\\"],[3,\\\"action\\\",[[19,0,[]],\\\"start\\\"]],[7],[0,\\\"Restart\\\"],[8],[0,\\\"\\\\n\\\"],[8],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},{\\\"statements\\\":[[6,\\\"div\\\"],[9,\\\"class\\\",\\\"button-container\\\"],[7],[0,\\\"\\\\n  \\\"],[6,\\\"button\\\"],[3,\\\"action\\\",[[19,0,[]],\\\"start\\\"]],[7],[0,\\\"Start\\\"],[8],[0,\\\"\\\\n\\\"],[8],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]}],[0,\\\"\\\\n\\\"],[6,\\\"canvas\\\"],[9,\\\"id\\\",\\\"stage\\\"],[9,\\\"width\\\",\\\"380\\\"],[9,\\\"height\\\",\\\"340\\\"],[7],[8],[0,\\\"\\\\n\\\"],[4,\\\"if\\\",[[20,[\\\"playing\\\"]]],null,{\\\"statements\\\":[[4,\\\"if\\\",[[20,[\\\"winner\\\"]]],null,{\\\"statements\\\":[[0,\\\"  \\\"],[6,\\\"div\\\"],[9,\\\"class\\\",\\\"message game-over\\\"],[7],[0,\\\"\\\\n    \\\"],[6,\\\"p\\\"],[7],[1,[18,\\\"winner\\\"],false],[0,\\\" wins!\\\"],[8],[0,\\\"\\\\n  \\\"],[8],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},null],[4,\\\"if\\\",[[20,[\\\"draw\\\"]]],null,{\\\"statements\\\":[[0,\\\"  \\\"],[6,\\\"div\\\"],[9,\\\"class\\\",\\\"message game-over\\\"],[7],[0,\\\"\\\\n    \\\"],[6,\\\"p\\\"],[7],[0,\\\"We'll call it a draw\\\"],[8],[0,\\\"\\\\n  \\\"],[8],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},null],[4,\\\"if\\\",[[20,[\\\"yellow\\\"]]],null,{\\\"statements\\\":[[0,\\\"    \\\"],[6,\\\"div\\\"],[9,\\\"class\\\",\\\"message yellow\\\"],[7],[0,\\\"\\\\n      \\\"],[6,\\\"p\\\"],[7],[0,\\\"Your Turn\\\"],[8],[0,\\\"\\\\n    \\\"],[8],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},null],[4,\\\"if\\\",[[20,[\\\"red\\\"]]],null,{\\\"statements\\\":[[0,\\\"    \\\"],[6,\\\"div\\\"],[9,\\\"class\\\",\\\"message red\\\"],[7],[0,\\\"\\\\n      \\\"],[6,\\\"p\\\"],[7],[0,\\\"Computer's Turn\\\"],[8],[0,\\\"\\\\n    \\\"],[8],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},null]],\\\"parameters\\\":[]},null]],\\\"hasEval\\\":false}\", \"meta\": { \"moduleName\": \"cw2/templates/components/connect-4.hbs\" } });\n});","define(\"cw2/templates/game\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.HTMLBars.template({ \"id\": \"mudTM4aP\", \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"connect-4\\\"],false],[0,\\\"\\\\n\\\"]],\\\"hasEval\\\":false}\", \"meta\": { \"moduleName\": \"cw2/templates/game.hbs\" } });\n});","\n","define('cw2/config/environment', [], function() {\n  var prefix = 'cw2';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","if (!runningTests) {\n  require(\"cw2/app\")[\"default\"].create({\"name\":\"cw2\",\"version\":\"0.0.0\"});\n}\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;","file":"cw2.js"}